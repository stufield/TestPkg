// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// calcL1
NumericMatrix calcL1(List e);
RcppExport SEXP _TestPkg_calcL1(SEXP eSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type e(eSEXP);
    rcpp_result_gen = Rcpp::wrap(calcL1(e));
    return rcpp_result_gen;
END_RCPP
}
// match1
IntegerVector match1(const CharacterVector& x, const CharacterVector& table);
RcppExport SEXP _TestPkg_match1(SEXP xSEXP, SEXP tableSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const CharacterVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const CharacterVector& >::type table(tableSEXP);
    rcpp_result_gen = Rcpp::wrap(match1(x, table));
    return rcpp_result_gen;
END_RCPP
}
// match2
IntegerVector match2(const CharacterVector& x, const CharacterVector& table);
RcppExport SEXP _TestPkg_match2(SEXP xSEXP, SEXP tableSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const CharacterVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const CharacterVector& >::type table(tableSEXP);
    rcpp_result_gen = Rcpp::wrap(match2(x, table));
    return rcpp_result_gen;
END_RCPP
}
// prod_cpp
double prod_cpp(NumericVector x);
RcppExport SEXP _TestPkg_prod_cpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(prod_cpp(x));
    return rcpp_result_gen;
END_RCPP
}
// prodMat
NumericVector prodMat(NumericMatrix x);
RcppExport SEXP _TestPkg_prodMat(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(prodMat(x));
    return rcpp_result_gen;
END_RCPP
}
// test_
void test_();
RcppExport SEXP _TestPkg_test_() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    test_();
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_TestPkg_calcL1", (DL_FUNC) &_TestPkg_calcL1, 1},
    {"_TestPkg_match1", (DL_FUNC) &_TestPkg_match1, 2},
    {"_TestPkg_match2", (DL_FUNC) &_TestPkg_match2, 2},
    {"_TestPkg_prod_cpp", (DL_FUNC) &_TestPkg_prod_cpp, 1},
    {"_TestPkg_prodMat", (DL_FUNC) &_TestPkg_prodMat, 1},
    {"_TestPkg_test_", (DL_FUNC) &_TestPkg_test_, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_TestPkg(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
